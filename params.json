{"name":"Larasupport","tagline":"Adds Laravel Packages Support to Lumen and Other Helpers.","body":"Larasupport Package\r\n====================\r\n\r\n[![Package for Lumen](https://img.shields.io/badge/Package%20for%20-Lumen-blue.svg?style=flat-square)](https://github.com/irazasyed/larasupport)\r\n[![Latest Version](https://img.shields.io/github/release/irazasyed/larasupport.svg?style=flat-square)](https://github.com/irazasyed/larasupport/releases)\r\n[![Software License](https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square)](LICENSE)\r\n[![Total Downloads](https://img.shields.io/packagist/dt/irazasyed/larasupport.svg?style=flat-square)](https://packagist.org/packages/irazasyed/larasupport)\r\n\r\n\r\n> Laravel Support for Lumen: Adds missing helpers that are not being made to the core of Lumen. Lets you use Laravel Packages in Lumen.\r\n>\r\n> There are some helper functions that are available in core of Laravel framework which are being used in Laravel Packages. Now because of these helpers missing in core of the Lumen, You won't be able to use those amazing Laravel Packages.\r\n>\r\n> I had submited PRs as well as created issue tickets in Lumen to add these helpers to the core but it got rejected with a reason to use Laravel instead. Just for Packages support i didn't want to use full-stack framework. There were few discussions about the same as well. Hence, This package to deal with this issue!\r\n\r\n## Quick Start\r\n\r\n\r\n### Installation\r\n\r\n#### Install Through Composer\r\n\r\nYou can either add the package directly by firing this command\r\n\r\n```\r\n$ composer require irazasyed/larasupport:~1.0\r\n```\r\n\t\r\nOr add in the `require` key of `composer.json` file manually\r\n\r\n```\r\n\"irazasyed/larasupport\": \"~1.0\"\r\n```\r\n\r\nAnd Run the Composer update command\r\n\r\n```\r\n$ composer update\r\n```\r\n\r\nAnd you're done! You can now start installing any Laravel Package out there.\r\n\r\n## Available Methods\r\n> These helpers can be used across your Lumen project, not only with Laravel Packages.\r\n\r\n#### public_path\r\nGet the fully qualified path to the `public` directory. You can set env variable `PUBLIC_PATH` and it'll return the same instead of the default `public`.\r\n\r\n#### config_path\r\nGet the fully qualified path to the `config` directory (Mostly used with Laravel Packages).\r\n\r\n#### database_path\r\nGet the fully qualified path to the `database` directory (Mostly used with Laravel Packages).\r\n\r\n#### route_parameter\r\n```php\r\nroute_parameter($name, $default = null)\r\n```\r\nGet a given parameter from the route.\r\n\r\n## Contributions\r\n\r\nPRs are Welcome :)\r\n\r\n## Additional information\r\n\r\n\r\nAny issues, please [report here](https://github.com/irazasyed/larasupport/issues).\r\n\r\n## License\r\n\r\n[MIT](LICENSE) Â© [Syed Irfaq R.](http://lk.gd/irazasyed)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}